package com.xiaobaicai.toolwindow;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.xiaobaicai.listener.ChatGPTSendBtnActionListener;
import lombok.Data;

import javax.swing.*;

import java.awt.*;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.List;
import java.util.concurrent.TimeUnit;

/**
 * @author caijy
 * @description TODO
 * @date 2023/3/5 星期日 9:28 下午
 */
@Data
public class ChatGPTBabyWindow {
    private JTabbedPane chatTabbedPane;
    private JTextArea sendText;
    private JButton sendBtn;
    private JScrollPane historyScrollPane;
    private JPanel chatPane;
    private JPanel sendPane;
    private JTextArea historyTextArea;
    private JScrollPane sendTextScrollPane;

    public void createUIComponents() {

    }

    public ChatGPTBabyWindow() {
        //        sendBtn.addActionListener(new ChatGPTSendBtnActionListener(this));
    }

    public void showHis() {
        SwingWorker<String, Integer> task = new SwingWorker<String, Integer>() {

            @Override
            protected String doInBackground() throws Exception {
                for (int i = 0; i < 10; i++) {
                    TimeUnit.SECONDS.sleep(1);
                    setProgress(i);
                    publish(i);
                }
                return "下载完成！";
            }

            @Override
            protected void process(List<Integer> chunks) {
                Integer processValue = chunks.get(0);
                historyTextArea.append(String.format("已下载%s%\n", processValue * 10));
            }

            @Override
            protected void done() {
                String res = null;
                try {
                    res = get();
                } catch (Exception e) {

                }
                System.out.println("done... ");
                historyTextArea.append(res);
            }
        };
        task.addPropertyChangeListener(new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if ("process".equals(evt.getPropertyName())) {
                    int newValue = (int)evt.getNewValue();
                    System.out.println("addPropertyChangeListener.propertyChange " + newValue);
                }
            }
        });
        task.execute();
    }

    {
        // GUI initializer generated by IntelliJ IDEA GUI Designer
        // >>> IMPORTANT!! <<<
        // DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(chatTabbedPane,
            new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null,
                new Dimension(200, 200), null, 0, false));
        chatPane = new JPanel();
        chatPane.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        chatTabbedPane.addTab("聊天", chatPane);
        sendPane = new JPanel();
        sendPane.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        chatPane.add(sendPane, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        sendBtn = new JButton();
        sendBtn.setText("发送");
        sendPane.add(sendBtn, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        sendTextScrollPane = new JScrollPane();
        sendPane.add(sendTextScrollPane,
            new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0,
                false));
        sendText = new JTextArea();
        sendText.setAlignmentY(0.25f);
        sendText.setAutoscrolls(false);
        sendText.setText("");
        sendTextScrollPane.setViewportView(sendText);
        historyScrollPane = new JScrollPane();
        chatPane.add(historyScrollPane,
            new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0,
                false));
        historyTextArea = new JTextArea();
        historyScrollPane.setViewportView(historyTextArea);
    }
}
